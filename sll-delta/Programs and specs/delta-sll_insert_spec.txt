;;insert(x, kk): inserts k into the a maximal inital segment below k

;;Block 1
;@pre: ls(x, nil) && oldmkeys = mkeys(x, nil)

;;assume x == nil or x.key > kk
;;create new y Loc
;;y.key := kk
;;y.next := x
;;x := y
;;return x
;;--delta is y

;@post: ls2(x, nil) && mkeys2(x, nil) = oldmkeys \mult-union {kk}
;;End of Block 1

;;Block 2
;@pre: ls(x, nil) && oldmkeys = mkeys(x, nil)

;;assume x =/= nil and x.key <= kk
;;temp := x
;;--delta is nothing

;@post: ls(x, nil) && oldmkeys(x, nil)
;;&& ls(x, temp) && temp =/= nil && temp.key <= kk
;;End of Block 2

;;Block 3
;@pre: list(x) && oldmkeys(x, nil)
;;&& ls(x, temp) && temp =/= nil && temp.key <= kk

;;while temp.next =/= nil && temp.next.key <= kk
;;temp := temp.next
;;--delta is temp

;@post: ls(x, nil) && oldmkeys(x, nil)
;;&& ls(x, temp) && temp =/= nil && temp.key <= kk
;;end-of-while
;;End of Block 3

;;Block 4
;@pre: ls(x, nil) && oldmkeys = mkeys(x, nil)
;;&& ls(x, temp) && temp =/= nil && temp.key <= kk
;; && end-of-while assertion

;;create new y Loc
;;y.key := kk
;;y.next := temp.next
;;temp.next := y
;;return x
;;--delta is temp, y

;@post: ls2(x, nil) && mkeys2(x, nil) = oldmkeys \mult-union {kk}
;;End of Block 4